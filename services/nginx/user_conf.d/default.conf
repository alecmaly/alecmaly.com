upstream sharepoint_json_helper {
    server sharepoint-json-helper:3000;
}
upstream random_info_website {
    server random-info-website:3000;
}

upstream web3_vuln_server {
    server web3-vuln-server:3000;
}

upstream oss_vuln_server {
    server oss-vuln-server:3000;
}

upstream riskfactor_redirect {
    server riskfactor-server:8000;
}

upstream blog_search_server {
    server blog-search-server:5000;
}

upstream freshrss_server {
    server freshrss-server:80;
}


# set rate limiting
limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
# ignore invalid headers
ignore_invalid_headers off;


server {
    listen 80 default_server reuseport;
    listen [::]:80 default_server reuseport;

    ignore_invalid_headers off;

    # Pass this particular URL off to the certbot server so it can properly
    # respond to the Let's Encrypt ACME challenges for the HTTPS certificates.
    location '/.well-known/acme-challenge' {
        default_type "text/plain";
        proxy_pass http://localhost:81;
    }

    # redirect root path to https
    location = / {
        return 301 https://$http_host$request_uri;
    }
}

server {
    # Listen to port 443 on both IPv4 and IPv6.
    listen 443 ssl default_server reuseport;
    listen [::]:443 ssl default_server reuseport;

    ignore_invalid_headers off;

    # Domain names this server should respond to.
    server_name alecmaly.com www.alecmaly.com;

    # Load the certificate files.
    ssl_certificate         /etc/letsencrypt/live/alecmaly.com/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/alecmaly.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/alecmaly.com/chain.pem;

    # Load the Diffie-Hellman parameter.
    # ssl_dhparam /etc/letsencrypt/dhparams/dhparam.pem;

    # return 200 'Let\'s Encrypt certificate successfully installe
    



    # location / {
    #     limit_req zone=one burst=5;
    #     proxy_pass http://web;
    #     proxy_set_header Host alecmaly.com;
    #     proxy_redirect off;
    # }

    location '/riskfactor_redirect' {
        limit_req zone=one burst=5;
        proxy_pass http://riskfactor_redirect;
        proxy_set_header Host alecmaly.com;
        proxy_redirect off;

        # echo $request_uri
    }

    location '/api/search' {
        add_header "Access-Control-Allow-Origin"  *;
        proxy_pass http://blog_search_server;
    }

    location / {
        root /var/www/html/blog;
        index index.html;

        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri.html $uri/ =404;
    }


    # location / {
    #         proxy_pass              https://alecmaly.github.io/;
    #         proxy_redirect          default;
    #         proxy_buffering         off;
    #         proxy_set_header        Host                    $host;
    #         proxy_set_header        X-Real-IP               $remote_addr;
    #         proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
    #         proxy_set_header        X-Forwarded-Protocol    $scheme;
    # }

}

server {
    listen              443 ssl;
    server_name         sharepoint-json-helper.alecmaly.com;
    ssl_certificate_key /etc/letsencrypt/live/alecmaly.com/privkey.pem;
    
    location / {
        limit_req zone=one burst=5;
        proxy_pass http://sharepoint_json_helper;
        proxy_redirect off;
    }
}

server {
    listen              443 ssl;
    server_name         random.alecmaly.com;
    ssl_certificate_key /etc/letsencrypt/live/alecmaly.com/privkey.pem;
    
    location / {
        limit_req zone=one burst=5;
        proxy_pass http://random_info_website;
        proxy_redirect off;
    }
}

server {
    listen              443 ssl;
    server_name         oss-vulns.alecmaly.com;
    ssl_certificate_key /etc/letsencrypt/live/alecmaly.com/privkey.pem;
    
    # Redirect / to report.html
    location = / {
        return 301 /report.html;
    }

    # Redirect /data/ requests to report.html
    location ^~ /data/ {
        return 301 /report.html;
    }

    # Proxy pass all other requests
    location / {
        limit_req zone=one burst=5;
        proxy_pass http://oss_vuln_server;
        proxy_redirect off;
    }
}


server {
    listen              443 ssl;
    server_name         web3-vulns.alecmaly.com;

    ssl_certificate     /etc/letsencrypt/live/alecmaly.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/alecmaly.com/privkey.pem;

    # Allow access only to /public
    location /public {
        limit_req zone=one burst=5;
        proxy_pass http://web3_vuln_server;
        proxy_redirect off;
    }

    # Deny access to everything else
    location / {
        return 301 /public;
    }
}


server {
    listen              443 ssl;
    server_name         rss.alecmaly.com;

    ssl_certificate_key /etc/letsencrypt/live/alecmaly.com/privkey.pem;

    # location / {
	# 	try_files $uri $uri/ =404;
	# 	index index.htm index.html;
	# }

	location / {
        # limit_req zone=one burst=5;
		proxy_pass http://freshrss_server/;
		add_header X-Frame-Options SAMEORIGIN;
		add_header X-XSS-Protection "1; mode=block";
		proxy_redirect off;
		proxy_buffering off;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-Prefix /;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-Port $server_port;
		proxy_read_timeout 90;

		# Forward the Authorization header for the Google Reader API.
		proxy_set_header Authorization $http_authorization;
		proxy_pass_header Authorization;
	}


    # Proxy pass all other requests
    # location / {
    #     limit_req zone=one burst=5;
    #     proxy_pass http://freshrss_server;
    #     proxy_redirect off;
    # }
}
